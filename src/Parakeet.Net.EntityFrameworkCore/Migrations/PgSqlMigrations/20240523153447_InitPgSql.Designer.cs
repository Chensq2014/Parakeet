// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Parakeet.Net.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace Parakeet.Net.Migrations.PgSqlMigrations
{
    [DbContext(typeof(PgSqlMigrationsDbContext))]
    [Migration("20240523153447_InitPgSql")]
    partial class InitPgSql
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.PostgreSql)
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Entities.CraneAlarm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<short>("AlarmType")
                        .HasColumnType("smallint");

                    b.Property<int>("BrakingState")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<short>("CraneId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletionTime");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("text")
                        .HasColumnName("ExtraProperties");

                    b.Property<int?>("Fall")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifierId");

                    b.Property<decimal?>("Load")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Range")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RecordTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Rotation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TiltAngle")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TiltPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Torque")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TorquePercent")
                        .HasColumnType("numeric");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.Property<int>("WarnLevel")
                        .HasColumnType("integer");

                    b.Property<int>("WarnType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("WeightPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("WindSpeed")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("WindSpeedPercent")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("d_CraneAlarm", "device");
                });

            modelBuilder.Entity("Common.Entities.CraneBasic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ArticulatedLength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BoomHeight")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CompassAngle")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<short>("CraneId")
                        .HasColumnType("smallint");

                    b.Property<string>("CraneName")
                        .HasColumnType("text");

                    b.Property<string>("CraneType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletionTime");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("text")
                        .HasColumnName("ExtraProperties");

                    b.Property<int?>("Fall")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HookWeight")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifierId");

                    b.Property<decimal?>("LimitValue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("LongArm")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxAngle")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxHeight")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxLoadWeight")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxRadius")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxTorque")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxWindSpeed")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinAngle")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinHeight")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinLoadWeight")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinRadius")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinTorque")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinWindSpeed")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RecordTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ShortArm")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TowerHatHeight")
                        .HasColumnType("numeric");

                    b.Property<string>("Version")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal?>("X")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Y")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("d_CraneBasic", "device");
                });

            modelBuilder.Entity("Common.Entities.CraneRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("AlarmCode")
                        .HasColumnType("integer");

                    b.Property<int>("AngleWarnState")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<short>("CraneId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletionTime");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("DirAngle")
                        .HasColumnType("numeric");

                    b.Property<string>("DriverName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("text")
                        .HasColumnName("ExtraProperties");

                    b.Property<int?>("Fall")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric");

                    b.Property<int>("HeightWarnState")
                        .HasColumnType("integer");

                    b.Property<string>("IdCard")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<int>("KnWarnState")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifierId");

                    b.Property<decimal?>("Load")
                        .HasColumnType("numeric");

                    b.Property<int>("LoadWarnState")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<decimal?>("Obliquity")
                        .HasColumnType("numeric");

                    b.Property<int>("PowerStatus")
                        .HasColumnType("integer");

                    b.Property<int>("RadiusWarnState")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Range")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RecordTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Rotation")
                        .HasColumnType("numeric");

                    b.Property<int>("RotationWarnState")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SafeLoad")
                        .HasColumnType("numeric");

                    b.Property<string>("SourceId")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TiltAngle")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TiltX")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TiltY")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Torque")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TorquePercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("WeightPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("WindSpeed")
                        .HasColumnType("numeric");

                    b.Property<int>("WindSpeedWarnState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("d_CraneRecord", "device");
                });

            modelBuilder.Entity("Common.Entities.EnvironmentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AQI")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CO")
                        .HasColumnType("numeric");

                    b.Property<string>("COFlag")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletionTime");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("text")
                        .HasColumnName("ExtraProperties");

                    b.Property<decimal?>("Humidity")
                        .HasColumnType("numeric");

                    b.Property<string>("HumidityFlag")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifierId");

                    b.Property<decimal?>("NO2")
                        .HasColumnType("numeric");

                    b.Property<string>("NO2Flag")
                        .HasColumnType("text");

                    b.Property<decimal?>("Noise")
                        .HasColumnType("numeric");

                    b.Property<string>("NoiseFlag")
                        .HasColumnType("text");

                    b.Property<decimal?>("O3")
                        .HasColumnType("numeric");

                    b.Property<string>("O3Flag")
                        .HasColumnType("text");

                    b.Property<decimal?>("PM10")
                        .HasColumnType("numeric");

                    b.Property<string>("PM10Flag")
                        .HasColumnType("text");

                    b.Property<decimal?>("PM2P5")
                        .HasColumnType("numeric");

                    b.Property<string>("PM2P5Flag")
                        .HasColumnType("text");

                    b.Property<decimal?>("Pressure")
                        .HasColumnType("numeric");

                    b.Property<string>("PressureFlag")
                        .HasColumnType("text");

                    b.Property<decimal?>("Rainfall")
                        .HasColumnType("numeric");

                    b.Property<string>("RainfallFlag")
                        .HasColumnType("text");

                    b.Property<DateTime>("RecordTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("SO2")
                        .HasColumnType("numeric");

                    b.Property<string>("SO2Flag")
                        .HasColumnType("text");

                    b.Property<decimal?>("TSP")
                        .HasColumnType("numeric");

                    b.Property<string>("TSPFlag")
                        .HasColumnType("text");

                    b.Property<decimal?>("TVOC")
                        .HasColumnType("numeric");

                    b.Property<string>("TVOCFlag")
                        .HasColumnType("text");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("numeric");

                    b.Property<string>("TemperatureFlag")
                        .HasColumnType("text");

                    b.Property<decimal?>("Visibility")
                        .HasColumnType("numeric");

                    b.Property<string>("VisibilityFlag")
                        .HasColumnType("text");

                    b.Property<decimal?>("WindDirection")
                        .HasColumnType("numeric");

                    b.Property<string>("WindDirectionFlag")
                        .HasColumnType("text");

                    b.Property<decimal?>("WindSpeed")
                        .HasColumnType("numeric");

                    b.Property<string>("WindSpeedFlag")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("d_EnvironmentRecord", "device");
                });
#pragma warning restore 612, 618
        }
    }
}
