
<div id="grid-organization" class="show-grid"></div>
@section scripts
{
    <script type='text/javascript'>

        function initOrganizationTreeGrid(component) {
            var config = dxConfig.treeList('/api/parakeet/organization');
            config.levelSelects = dxConfig.selectEnumBox('/api/parakeet/enum/enumTypeItemKeyNameDescriptions?name=TreeNodeLevel');
            var organizationTypes = syncGet('/api/parakeet/enum/enumTypeItemKeyNameDescriptions?name=OrganizationType');
            config.organizationTypeSelects = dxConfig.selectEnumBox(organizationTypes);
            var organizationParents = syncGet('/api/parakeet/Organization/ParentSelectList?id=');
            config.organizationParentSelects = dxConfig.selectBox(organizationParents);
            config.refreshFunc = arguments.callee; //initOrganizationTreeGrid 函数本身
            config.gridId = 'grid-organization';
            config.gridSelector = '#' + config.gridId;
            config.editing.allowAdding = true;
            config.editing.allowDeleting = true;
            config.editing.allowUpdating = true;
            config.searchPanel.visible = true;
            //config.editing.mode = 'batch';
            config.editing.texts = { addRow: '添加根节点' };
            config.columns = [
                {
                    dataField: 'id',
                    caption: '序号',
                    sortIndex: 0,
                    sortOrder: 'asc',
                    visible: false
                },
                {
                    dataField: 'name',
                    caption: '名称',
                    minWidth: 200,
                    validationRules: [
                        { type: 'required', message: '名称为必填项' },
                        {
                            type: 'pattern',
                            pattern: /^[a-zA-Z\u4e00-\u9fa5]+[a-zA-Z0-9\u4e00-\u9fa5_]*$/i, // /^[A-Za-z0-9\s]+$/i,
                            message: '名称只能由中文、字母、数字和下划线组成且以中文或字母开头'
                        },
                        {
                            type: 'fieldsUnique',
                            checkUrl: '/api/parakeet/Organization/CheckFields',
                            message: '同级节点名称重复',
                            fields: ['ParentId']
                        }
                    ]
                },
                {
                    dataField: 'code',
                    caption: '编码',
                    minWidth: 100,
                    validationRules: [
                        { type: 'required', message: '编码必填项' },
                        {
                            type: 'pattern',
                            pattern: /^[A-Za-z]\w*$/i,
                            message: '编码只能由字母、数字和下划线组成且以字母开头'
                        },
                        { type: 'fieldUnique', checkUrl: '/api/parakeet/Organization/CheckField', message: '编码重复' }
                    ]
                },
                {
                    dataField: 'level',
                    caption: '层级',
                    minWidth: 50,
                    allowEditing: false,
                    lookup: config.levelSelects
                },
                {
                    dataField: 'parentId',
                    caption: '父级',
                    minWidth: 100,
                    sortIndex: 0,
                    sortOrder: 'asc',
                    lookup: config.organizationParentSelects
                },
                {
                    dataField: 'organizationType',
                    caption: '组织类型',
                    minWidth: 100,
                    lookup: config.organizationTypeSelects,
                    validationRules: [
                        { type: 'required', message: '组织类型必填' }
                    ]
                }
                //{
                //    dataField: 'stampDutyRate',
                //    caption: '印花税税率(%)',
                //    dataType: 'number',
                //    format: '#0.00%',//format: { type: 'percent', precision: 2 },
                //    editorOptions: { min: 0, max: 1 },
                //    allowHeaderFiltering: false
                //}, {
                //    dataField: 'Amount',
                //    caption: '首年定额',
                //    dataType: 'number',
                //    format: { type: 'fixedPoint', precision: 2 },
                //    editorOptions: { min: 0, max: __Max },
                //    allowHeaderFiltering: false,
                //    validationRules: [
                //        {
                //            type: 'custom', validationCallback: function (options) {
                //                var newData = options.validator._validationGroup.data;
                //                var oldData = options.validator._validationGroup.oldData;
                //                var mode = newData && newData.OrganizationType ? newData.OrganizationType : (oldData ? oldData.OrganizationType : 0);
                //                if (mode===quota)
                //                {
                //                    if (!options.value)
                //                    {
                //                        options.rule.message = '定额必填';
                //                        return false;
                //                    }
                //                }
                //                return true;
                //            }
                //        }
                //    ]
                //},
                //{
                //    dataField: 'remark', caption: '备注',

                //    allowHeaderFiltering:false
                //}
            ];
            config.onInitNewRow = function (e) {
                e.data.parentId = $.isEmptyObject(e.data.parentId) ? null : e.data.parentId;
            };

            config.onEditingStart = function (e) {
                if (e.column.dataField === 'parentId') {
                    e.column.lookup.dataSource = syncGet('/api/parakeet/organization/parentSelectList?id=' + e.data.id);//, { id: e.data.id }
                    //if (!e.data.parentId) {
                    //    e.cancel = true;
                    //} else {
                    //}
                }
                //e.component.selectRowsByIndexes(e.component.getRowIndexByKey(e.key));
            };

            //config.onEditorPreparing = function (e) {
            //    debugger;
            //    //// treelist
            //    //if (e.row && e.row.node) {
            //    //    e.row.data.Level = e.row.node.level;
            //    //    //if (e.dataField === "InputTaxRate" && e.row.node.children.length > 0) {
            //    //    //    //e.editorElement.parent().parent().attr("read-only", true);
            //    //    //    e.cancel = false;
            //    //    //}
            //    //};
            //};

            //改为+,-号添加数据 不适合这样做 应使用配置
            //config.onCellPrepared = function (e) {
            //    if (e.rowType === 'data' && e.column.command === 'edit') {
            //        var isEditing = e.row.isEditing,
            //            $links = e.cellElement.find('.dx-link');
            //        $links.text('');

            //        if (e.row.node.children.length > 0) {
            //            $links.filter('.dx-link-delete').remove();
            //        }
            //        // 规定业态计费项最多只能有50层结构
            //        if (e.row.level === -1) {
            //            $links.remove();
            //            return;
            //        }
            //        if (e.row.level < 49) {
            //            $links.filter('.dx-link-add').addClass('dx-icon-add').attr('title', '添加子节点');
            //        } else {
            //            $links.filter('.dx-link-add').remove();
            //            $links.filter('.dx-link-delete').css('margin-left', '10px');
            //        }

            //        if (isEditing) {
            //            $links.filter('.dx-link-save').addClass('dx-icon-save').attr('title', '保存');
            //            $links.filter('.dx-link-cancel').addClass('dx-icon-revert').attr('title', '撤销');
            //        } else {
            //            $links.filter('.dx-link-edit').addClass('dx-icon-edit').attr('title', '编辑');
            //            if (e.row.node.children.length == 0) {
            //                $links.filter('.dx-link-delete').addClass('dx-icon-close').attr('title', '删除');
            //            }
            //        }
            //    }
            //    //if (e.column.dataField === 'InputTaxRate') {
            //    //    if (e.row && e.row.data.Id && e.row.node.children.length > 0) {
            //    //        e.cellElement.attr('read-only', true).html('').removeClass('dx-editor-cell');
            //    //        e.cellElement.css('background-color', 'white');
            //    //    }
            //    //}
            //    //if (e.column.dataField === 'StampDutyRate') {
            //    //    if (e.row && e.row.data.Id && e.row.node.parent.key) {
            //    //        if (e.row.data.Mark !== billingItemMark.land) {
            //    //            e.cellElement.attr('read-only', true).html('').removeClass('dx-editor-cell');
            //    //            e.cellElement.css('background-color', 'white');
            //    //        }
            //    //    }
            //    //}
            //    //setProxyDeleteHTML(e, '组织机构设置');
            //};


            //config.onRowValidating = function (e) {
            //    var rowData = e.oldData ? e.oldData : e.newData;
            //    if (!rowData.ParentId) {
            //        if (!rowData.Code) {
            //            e.isValid = false;
            //            e.errorText = '必须填写根级节点编码';
            //        }
            //    }
            //};

            //config.onToolbarPreparing = function (e) {
            //    //var items = e.toolbarOptions.items;
            //    $.each(e.toolbarOptions.items, function (index, item) {
            //        if (item.name === 'addRowButton') {
            //        }
            //    });
            //};

            gridSugar(config);
            config.component = $(config.gridSelector).dxTreeList(config).dxTreeList('instance');
        }

        $(function () {
            initOrganizationTreeGrid();
        });

    </script>
}

